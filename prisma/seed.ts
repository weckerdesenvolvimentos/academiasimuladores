import { PrismaClient } from '@prisma/client';
import { slugify } from '../lib/utils';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Iniciando seed do banco de dados...');

  // Criar √°reas
  const areas = [
    { name: 'Ci√™ncias Exatas', slug: slugify('Ci√™ncias Exatas') },
    { name: 'Ci√™ncias Humanas', slug: slugify('Ci√™ncias Humanas') },
    { name: 'Ci√™ncias Biol√≥gicas', slug: slugify('Ci√™ncias Biol√≥gicas') },
    { name: 'Engenharias', slug: slugify('Engenharias') },
    { name: 'Tecnologia da Informa√ß√£o', slug: slugify('Tecnologia da Informa√ß√£o') },
  ];

  console.log('üìö Criando √°reas...');
  const createdAreas = [];
  for (const area of areas) {
    const existingArea = await prisma.area.findUnique({
      where: { name: area.name },
    });

    if (!existingArea) {
      const createdArea = await prisma.area.create({
        data: area,
      });
      createdAreas.push(createdArea);
      console.log(`‚úÖ √Årea criada: ${createdArea.name}`);
    } else {
      createdAreas.push(existingArea);
      console.log(`‚ÑπÔ∏è √Årea j√° existe: ${existingArea.name}`);
    }
  }

  // Criar sub√°reas
  const subareas = [
    // Ci√™ncias Exatas
    { name: 'Matem√°tica', areaName: 'Ci√™ncias Exatas' },
    { name: 'F√≠sica', areaName: 'Ci√™ncias Exatas' },
    { name: 'Qu√≠mica', areaName: 'Ci√™ncias Exatas' },
    { name: 'Estat√≠stica', areaName: 'Ci√™ncias Exatas' },

    // Ci√™ncias Humanas
    { name: 'Hist√≥ria', areaName: 'Ci√™ncias Humanas' },
    { name: 'Geografia', areaName: 'Ci√™ncias Humanas' },
    { name: 'Filosofia', areaName: 'Ci√™ncias Humanas' },
    { name: 'Sociologia', areaName: 'Ci√™ncias Humanas' },

    // Ci√™ncias Biol√≥gicas
    { name: 'Biologia', areaName: 'Ci√™ncias Biol√≥gicas' },
    { name: 'Medicina', areaName: 'Ci√™ncias Biol√≥gicas' },
    { name: 'Enfermagem', areaName: 'Ci√™ncias Biol√≥gicas' },
    { name: 'Farm√°cia', areaName: 'Ci√™ncias Biol√≥gicas' },

    // Engenharias
    { name: 'Engenharia Civil', areaName: 'Engenharias' },
    { name: 'Engenharia Mec√¢nica', areaName: 'Engenharias' },
    { name: 'Engenharia El√©trica', areaName: 'Engenharias' },
    { name: 'Engenharia de Software', areaName: 'Engenharias' },

    // Tecnologia da Informa√ß√£o
    { name: 'Programa√ß√£o', areaName: 'Tecnologia da Informa√ß√£o' },
    { name: 'Banco de Dados', areaName: 'Tecnologia da Informa√ß√£o' },
    { name: 'Redes de Computadores', areaName: 'Tecnologia da Informa√ß√£o' },
    { name: 'Intelig√™ncia Artificial', areaName: 'Tecnologia da Informa√ß√£o' },
  ];

  console.log('üìñ Criando sub√°reas...');
  const createdSubareas = [];
  for (const subarea of subareas) {
    const area = createdAreas.find(a => a.name === subarea.areaName);
    if (!area) continue;

    const existingSubarea = await prisma.subarea.findUnique({
      where: {
        areaId_name: {
          areaId: area.id,
          name: subarea.name,
        },
      },
    });

    if (!existingSubarea) {
      const createdSubarea = await prisma.subarea.create({
        data: {
          name: subarea.name,
          areaId: area.id,
        },
      });
      createdSubareas.push(createdSubarea);
      console.log(`‚úÖ Sub√°rea criada: ${createdSubarea.name} (${area.name})`);
    } else {
      createdSubareas.push(existingSubarea);
      console.log(`‚ÑπÔ∏è Sub√°rea j√° existe: ${existingSubarea.name} (${area.name})`);
    }
  }

  // Criar grupos de simuladores
  const groups = [
    {
      name: 'Simuladores de Matem√°tica',
      context: 'Simuladores educacionais para ensino de matem√°tica b√°sica e avan√ßada',
      codeBase: 'MATH',
    },
    {
      name: 'Simuladores de F√≠sica',
      context: 'Simuladores para experimentos virtuais de f√≠sica',
      codeBase: 'PHYS',
    },
    {
      name: 'Simuladores de Qu√≠mica',
      context: 'Laborat√≥rios virtuais de qu√≠mica e experimentos',
      codeBase: 'CHEM',
    },
    {
      name: 'Simuladores de Programa√ß√£o',
      context: 'Ambientes de aprendizado de programa√ß√£o e algoritmos',
      codeBase: 'PROG',
    },
    {
      name: 'Simuladores de Biologia',
      context: 'Simuladores para estudo de biologia e anatomia',
      codeBase: 'BIO',
    },
  ];

  console.log('üéÆ Criando grupos de simuladores...');
  const createdGroups = [];
  for (const group of groups) {
    const existingGroup = await prisma.simulatorGroup.findFirst({
      where: { codeBase: group.codeBase },
    });

    if (!existingGroup) {
      const createdGroup = await prisma.simulatorGroup.create({
        data: group,
      });
      createdGroups.push(createdGroup);
      console.log(`‚úÖ Grupo criado: ${createdGroup.name} (${createdGroup.codeBase})`);
    } else {
      createdGroups.push(existingGroup);
      console.log(`‚ÑπÔ∏è Grupo j√° existe: ${existingGroup.name} (${existingGroup.codeBase})`);
    }
  }

  // Criar simuladores de exemplo
  const simulators = [
    {
      groupName: 'Simuladores de Matem√°tica',
      discipline: 'C√°lculo Diferencial e Integral',
      areaName: 'Ci√™ncias Exatas',
      subareaName: 'Matem√°tica',
      learningObjectives: 'Compreender os conceitos fundamentais de derivadas e integrais, aplicando-os em problemas pr√°ticos.',
      gameMechanics: 'Sistema de n√≠veis progressivos com exerc√≠cios interativos, feedback imediato e gamifica√ß√£o.',
      kpis: 'Taxa de conclus√£o dos exerc√≠cios, tempo m√©dio de resolu√ß√£o, precis√£o nas respostas.',
      syllabus: '<h2>Ementa do Curso</h2><p>Este simulador aborda os conceitos fundamentais do c√°lculo diferencial e integral atrav√©s de exerc√≠cios interativos e visualiza√ß√µes gr√°ficas.</p><h3>Conte√∫do Program√°tico:</h3><ul><li>Limites e continuidade</li><li>Derivadas e suas aplica√ß√µes</li><li>Integrais definidas e indefinidas</li><li>Aplica√ß√µes de integrais</li></ul>',
      devObjectives: '<h2>Objetivos de Desenvolvimento</h2><p>Desenvolver um simulador completo de c√°lculo com as seguintes funcionalidades:</p><h3>Sprint 1:</h3><ul><li>Interface b√°sica do simulador</li><li>Sistema de exerc√≠cios simples</li></ul><h3>Sprint 2:</h3><ul><li>Visualiza√ß√µes gr√°ficas</li><li>Sistema de feedback</li></ul>',
      isPublished: true,
    },
    {
      groupName: 'Simuladores de F√≠sica',
      discipline: 'Mec√¢nica Cl√°ssica',
      areaName: 'Ci√™ncias Exatas',
      subareaName: 'F√≠sica',
      learningObjectives: 'Entender os princ√≠pios da mec√¢nica newtoniana atrav√©s de simula√ß√µes interativas.',
      gameMechanics: 'Simula√ß√µes de laborat√≥rio virtual com par√¢metros ajust√°veis e visualiza√ß√£o em tempo real.',
      kpis: 'N√∫mero de experimentos realizados, precis√£o nas previs√µes, tempo de aprendizado.',
      syllabus: '<h2>Ementa do Curso</h2><p>Simulador de mec√¢nica cl√°ssica com experimentos virtuais interativos.</p><h3>Conte√∫do Program√°tico:</h3><ul><li>Leis de Newton</li><li>Movimento em uma e duas dimens√µes</li><li>Energia e trabalho</li><li>Momento linear e colis√µes</li></ul>',
      devObjectives: '<h2>Objetivos de Desenvolvimento</h2><p>Criar um laborat√≥rio virtual de f√≠sica com simula√ß√µes realistas.</p>',
      isPublished: true,
    },
    {
      groupName: 'Simuladores de Programa√ß√£o',
      discipline: 'Algoritmos e Estruturas de Dados',
      areaName: 'Tecnologia da Informa√ß√£o',
      subareaName: 'Programa√ß√£o',
      learningObjectives: 'Dominar algoritmos fundamentais e estruturas de dados atrav√©s de visualiza√ß√µes interativas.',
      gameMechanics: 'Editor de c√≥digo integrado com visualiza√ß√£o de execu√ß√£o passo a passo.',
      kpis: 'N√∫mero de algoritmos implementados, efici√™ncia das solu√ß√µes, tempo de debug.',
      syllabus: '<h2>Ementa do Curso</h2><p>Simulador para aprendizado de algoritmos e estruturas de dados com visualiza√ß√µes interativas.</p>',
      devObjectives: '<h2>Objetivos de Desenvolvimento</h2><p>Desenvolver um ambiente de programa√ß√£o visual e interativo.</p>',
      isPublished: false,
    },
  ];

  console.log('üéØ Criando simuladores de exemplo...');
  for (const simulator of simulators) {
    const group = createdGroups.find(g => g.name === simulator.groupName);
    const area = createdAreas.find(a => a.name === simulator.areaName);
    const subarea = createdSubareas.find(s => s.name === simulator.subareaName && s.areaId === area?.id);

    if (!group || !area || !subarea) {
      console.log(`‚ö†Ô∏è Dados n√£o encontrados para simulador: ${simulator.discipline}`);
      continue;
    }

    // Verificar se j√° existe um simulador com este nome no grupo
    const existingSimulator = await prisma.simulatorDiscipline.findFirst({
      where: {
        groupId: group.id,
        discipline: simulator.discipline,
      },
    });

    if (existingSimulator) {
      console.log(`‚ÑπÔ∏è Simulador j√° existe: ${simulator.discipline}`);
      continue;
    }

    // Gerar c√≥digo √∫nico
    const lastSimulator = await prisma.simulatorDiscipline.findFirst({
      where: { groupId: group.id },
      orderBy: { code: 'desc' },
    });

    let sequence = 1;
    if (lastSimulator) {
      const lastSequence = parseInt(lastSimulator.code.split('-').pop() || '0');
      sequence = lastSequence + 1;
    }

    const code = `SIM-${group.codeBase}-${sequence.toString().padStart(3, '0')}`;

    const createdSimulator = await prisma.simulatorDiscipline.create({
      data: {
        groupId: group.id,
        discipline: simulator.discipline,
        areaId: area.id,
        subareaId: subarea.id,
        code,
        learningObjectives: simulator.learningObjectives,
        gameMechanics: simulator.gameMechanics,
        kpis: simulator.kpis,
        syllabus: simulator.syllabus,
        devObjectives: simulator.devObjectives,
        isPublished: simulator.isPublished,
      },
    });

    console.log(`‚úÖ Simulador criado: ${createdSimulator.code} - ${createdSimulator.discipline}`);
  }

  // Criar roadmaps de exemplo
  console.log('üó∫Ô∏è Criando roadmaps...');
  for (const group of createdGroups) {
    const existingRoadmap = await prisma.roadmap.findUnique({
      where: { groupId: group.id },
    });

    if (!existingRoadmap) {
      // Gerar valores aleat√≥rios para RICE
      const reach = Math.floor(Math.random() * 50) + 30; // 30-80
      const impact = Math.floor(Math.random() * 50) + 30; // 30-80
      const confidence = Math.floor(Math.random() * 30) + 60; // 60-90
      const effort = Math.floor(Math.random() * 40) + 20; // 20-60
      const riceScore = (reach * impact * confidence) / effort;

      const statuses = ['IDEIA', 'PROTOTIPO', 'PILOTO', 'PRODUCAO'];
      const status = statuses[Math.floor(Math.random() * statuses.length)] as any;

      const createdRoadmap = await prisma.roadmap.create({
        data: {
          groupId: group.id,
          status,
          reach,
          impact,
          confidence,
          effort,
          riceScore: Math.round(riceScore * 100) / 100,
        },
      });

      console.log(`‚úÖ Roadmap criado para ${group.name}: RICE Score ${createdRoadmap.riceScore}`);
    } else {
      console.log(`‚ÑπÔ∏è Roadmap j√° existe para ${group.name}`);
    }
  }

  // Criar usu√°rio admin de exemplo
  console.log('üë§ Criando usu√°rio admin...');
  const existingUser = await prisma.user.findUnique({
    where: { email: 'admin@simuladores.com' },
  });

  if (!existingUser) {
    const adminUser = await prisma.user.create({
      data: {
        email: 'admin@simuladores.com',
        name: 'Administrador',
        role: 'ADMIN',
      },
    });
    console.log(`‚úÖ Usu√°rio admin criado: ${adminUser.email}`);
  } else {
    console.log(`‚ÑπÔ∏è Usu√°rio admin j√° existe: ${existingUser.email}`);
  }

  console.log('üéâ Seed conclu√≠do com sucesso!');
}

main()
  .catch((e) => {
    console.error('‚ùå Erro durante o seed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });